{"version":3,"sources":["services/persons.js","components/Person.js","components/Filter.js","components/Notification.js","components/PersonForm.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Person","name","number","removePerson","onClick","Filter","value","onChange","Notification","message","className","type","content","PersonForm","props","onSubmit","onNameChange","onNumberChange","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","searchPerson","setSearchPerson","setMessage","useEffect","personService","initialPersons","event","target","preventDefault","nameObject","some","el","window","confirm","person","find","p","changedPerson","returnedPerson","map","setTimeout","catch","error","concat","filter","toLowerCase","includes","filteredPerson","newPersons","searchperson","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8482e2a3.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'http://lukasedv-phonebook-backend.azurewebsites.net/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n  }\n\nexport default { getAll, create, update, remove }","import React from 'react'\n\nconst Person = ({ name, number, removePerson }) => {\n    return(\n      <div>\n        {name} {number}\n        <button onClick={removePerson}>Remove</button>\n      </div>\n    )\n  }\n\nexport default Person","import React from 'react'\n\nconst Filter = ({value, onChange}) => {\n    return(\n    <div>\n        <input value={value} onChange={onChange} />\n        </div>\n        )\n    }\n\n\nexport default Filter","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className={message.type}>\n        {message.content}\n      </div>\n    )\n  }\n\n  export default Notification","import React from 'react'\n\nconst PersonForm = (props) => {\n    return(\n    <div>\n    <form onSubmit={props.onSubmit}>\n      <div>\n        Name \n        <input \n          value={props.name}\n          onChange={props.onNameChange}\n        />\n        </div>\n        <div>\n        Number\n        <input \n          value={props.number}\n          onChange={props.onNumberChange}\n        />\n        </div>\n        <button type=\"submit\">save</button> \n      </form>\n      </div>\n    )\n  }\n\nexport default PersonForm","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport Person from \"./components/Person\"\nimport Filter from \"./components/Filter\"\nimport Notification from \"./components/Notification\"\nimport PersonForm from \"./components/PersonForm\"\nimport \"./index.css\"\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchPerson, setSearchPerson] = useState('')\n  const [message, setMessage] = useState({})\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const userExists = (name) => {\n    return persons.some(function(el) {\n      return el.name === name;\n    }); \n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const nameObject = {\n      name: newName,\n      number: newNumber\n    }\n    if(userExists(newName)) {\n      if(window.confirm(`${newName} is already added to phonebook, do you want to edit the number?`)) {\n      const person = persons.find(p => p.name === newName)\n      const changedPerson = { ...person, number: newNumber }\n      const id = person.id\n      personService\n      .update(id, changedPerson)\n      .then(returnedPerson => {\n        setMessage({\n          content: `${newName} has been updated`,\n          type: \"message\"\n        })\n        setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n        setTimeout(() => {\n          setMessage(null)\n        }, 2000)\n\n      })\n      .catch(error => {\n        setMessage({\n          content: `${newName} has already been deleted`,\n          type: \"error\"\n        })\n      })\n    \n    } else {\n\n      }\n    } else {\n\n      personService\n      .create(nameObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setNewName('')\n        setNewNumber('')\n        setMessage({\n          content: `${newName} has been added`,\n          type: \"message\"\n        })\n        setTimeout(() => {\n          setMessage(null)\n        }, 2000)\n      })\n    }\n  }\n\n  const removePerson = (person) => {\n    if (window.confirm(`Do you really want to delete ${person.name}?`)) {\n\n    const newPersons = persons.filter((searchperson) => searchperson.id !== person.id)\n      personService.remove(person.id)\n      .then(\n        setPersons(newPersons),\n        setMessage({\n          content: `${person.name} has been deleted`,\n          type: \"message\"\n        }),\n        setTimeout(() => {\n          setMessage(null)\n        }, 2000)\n        )\n        .catch(error => {\n          setMessage({\n            content: `${person.name} was already deleted`,\n            type: \"error\"\n          })\n        })\n    }\n}\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearch = (event) => {\n    setSearchPerson(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter value={searchPerson} onChange={handleSearch} />\n      <h3>add a new person</h3>\n      <PersonForm \n        onSubmit={addPerson}\n        name={newName}\n        number={newNumber}\n        onNameChange={handleNameChange}\n        onNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      {persons.filter(person => person.name.toLowerCase().includes(searchPerson.toLowerCase())).map(filteredPerson =>\n        <Person \n        key={filteredPerson.name} \n        name={filteredPerson.name} \n        number={filteredPerson.number} \n        removePerson={() => removePerson(filteredPerson)}\n        />\n        )}\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\"\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}